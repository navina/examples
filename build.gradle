allprojects {
	repositories {
		mavenCentral()
		mavenLocal()
	}
}

apply from: file("gradle/dependency-versions.gradle")
apply from: file("gradle/customize.gradle")

allprojects {
    apply plugin: 'idea'
}

project(':rest-server') {
	apply plugin: 'java'
	apply plugin: 'checkstyle'

	dependencies {
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "org.slf4j:slf4j-log4j12:$slf4jVersion"

        compile "org.eclipse.jetty:jetty-server:$jettyVersion"
		compile "org.eclipse.jetty:jetty-servlet:$jettyVersion"

		compile "org.glassfish.jersey.core:jersey-server:$jerseyVersion"
		compile "org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVersion"
		compile "org.glassfish.jersey.containers:jersey-container-jetty-http:$jerseyVersion"

		testCompile "junit:junit:$junitVersion"
	}

	checkstyle {
        configFile = new File(rootDir, "checkstyle/checkstyle.xml")
	}

    tasks.create(name: "buildTar", type: Tar) {
        description 'Build a tarball with rest-server components and its dependencies'
        compression Compression.GZIP
        from(configurations.runtime) {  into("lib/")   }
        from(jar) { into("lib/")    }

        from(file("$projectDir/src/resource/index.html"))   {   into ("resources/") }
        from(file("$projectDir/src/main/resources/log4j.xml"))  { into ("resources/")   }

        from(file("$projectDir/src/main/bash/run-class.sh"))    { into ("bin/") }
        from(file("$projectDir/src/main/bash/run-rest-server.sh"))    { into ("bin/") }

    }
}

project(':disruptor-example') {
	apply plugin: 'java'
	apply plugin: 'checkstyle'

	dependencies {
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"

    compile 'com.lmax:disruptor:3.4.2'

    testCompile "junit:junit:$junitVersion"
	}

	checkstyle {
        configFile = new File(rootDir, "checkstyle/checkstyle.xml")
	}

    tasks.create(name: "buildTar", type: Tar) {
        description 'Build a tarball with disruptor and all dependencies'
        compression Compression.GZIP
        from(configurations.runtime) {  into("lib/")   }
        from(jar) { into("lib/")    }

        from(file("$projectDir/src/main/resources/log4j.xml"))  { into ("resources/")   }

        from(file("$projectDir/src/main/bash/run-class.sh"))    { into ("bin/") }

    }
}

